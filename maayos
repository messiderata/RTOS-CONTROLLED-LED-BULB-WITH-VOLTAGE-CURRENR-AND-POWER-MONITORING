#include <Arduino.h>
#include <Wire.h>
#include <Button.h>
#include "U8g2lib.h"
#include "RTClib.h"
#include <Adafruit_INA219.h>

RTC_DS3231 rtc;
U8G2_SH1106_128X64_NONAME_F_HW_I2C u8g2(U8G2_R0);
Adafruit_INA219 ina219;

// ' icon_manual', 16x16px
const unsigned char epd_bitmap__icon_ina[] PROGMEM = {
  0xff, 0xff, 0x80, 0x01, 0x83, 0xc1, 0x8d, 0xb1, 0x98, 0x19, 0x90, 0x09, 0xb0, 0x0d, 0xb0, 0x05,
  0x80, 0x11, 0x80, 0x21, 0x80, 0x41, 0x83, 0x81, 0x85, 0x41, 0x83, 0x81, 0x80, 0x01, 0xff, 0xff
};
// ' icon_monitoring', 16x16px
const unsigned char epd_bitmap__icon_monitoring[] PROGMEM = {
  0xff, 0xff, 0x80, 0x01, 0x80, 0x09, 0x80, 0x31, 0x80, 0xc1, 0x83, 0x01, 0x8c, 0x01, 0x90, 0x01,
  0xa0, 0x01, 0x80, 0x01, 0xff, 0xff, 0x01, 0x80, 0x01, 0x80, 0x01, 0x80, 0x7f, 0xfe, 0xff, 0xff
};
// ' icon_timer', 16x16px
const unsigned char epd_bitmap__icon_timer[] PROGMEM = {
  0x0f, 0xf0, 0x10, 0x08, 0x20, 0x04, 0x41, 0x02, 0x81, 0x01, 0x81, 0x01, 0x83, 0x81, 0x82, 0xfd,
  0x81, 0x81, 0x80, 0x01, 0x80, 0x01, 0x40, 0x02, 0x20, 0x04, 0x10, 0x08, 0x0f, 0xf0, 0x00, 0x00
};

// Array of all bitmaps for convenience. (Total bytes used to store images in PROGMEM = 144)

// ' icon_scrollbar', 8x64px
const unsigned char epd_bitmap__icon_scrollbar[] PROGMEM = {
  0x00, 0x02, 0x00, 0x02, 0x00, 0x02, 0x00, 0x02, 0x00, 0x02, 0x00, 0x02, 0x00, 0x02, 0x00, 0x02,
  0x00, 0x02, 0x00, 0x02, 0x00, 0x02, 0x00, 0x02, 0x00, 0x02, 0x00, 0x02, 0x00, 0x02, 0x00, 0x02,
  0x00, 0x02, 0x00, 0x02, 0x00, 0x02, 0x00, 0x02, 0x00, 0x02, 0x00, 0x02, 0x00, 0x02, 0x00, 0x02,
  0x00, 0x02, 0x00, 0x02, 0x00, 0x02, 0x00, 0x02, 0x00, 0x02, 0x00, 0x02, 0x00, 0x02, 0x00, 0x02
};
// ' icon_selector', 128x21px
const unsigned char epd_bitmap__icon_selector[] PROGMEM = {
  0x0f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x80,
  0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x40,
  0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x60,
  0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x60,
  0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x60,
  0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x60,
  0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x60,
  0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x60,
  0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x60,
  0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x60,
  0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x60,
  0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x60,
  0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x60,
  0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x60,
  0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x60,
  0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x60,
  0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x60,
  0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x60,
  0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x60,
  0x1f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xc0,
  0x0f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x80
};

// ' item_sel_bg', 128x20px
const unsigned char epd_bitmap__item_sel_bg[] PROGMEM = {
  0x1f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x80,
  0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xc0,
  0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x60,
  0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x60,
  0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x60,
  0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x60,
  0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x60,
  0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x60,
  0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x60,
  0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x60,
  0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x60,
  0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x60,
  0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x60,
  0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x60,
  0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x60,
  0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x60,
  0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0xe0,
  0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0xe0,
  0x60, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0xc0,
  0x3f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x80
};

const unsigned char epd_bitmap_border[] PROGMEM = {
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00,
  0x00, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00,
  0x00, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00,
  0x00, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00,
  0x00, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00,
  0x00, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00,
  0x00, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00,
  0x00, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00,
  0x00, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00,
  0x00, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00,
  0x00, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00,
  0x00, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00,
  0x00, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00,
  0x00, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00,
  0x00, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00,
  0x00, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00,
  0x00, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00,
  0x00, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00,
  0x00, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00,
  0x00, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00,
  0x00, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00,
  0x00, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00,
  0x00, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00,
  0x00, 0xf7, 0x77, 0x77, 0x77, 0x77, 0x77, 0x77, 0x77, 0x80, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00,
  0x00, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00,
  0x00, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00,
  0x00, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00,
  0x00, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00,
  0x00, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00,
  0x00, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00,
  0x00, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00,
  0x00, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00,
  0x00, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00,
  0x00, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00,
  0x00, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00,
  0x00, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00,
  0x00, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00,
  0x00, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00,
  0x00, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00,
  0x00, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00,
  0x00, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00,
  0x00, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00,
  0x00, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00,
  0x00, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00,
  0x00, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00,
  0x00, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00,
  0x00, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00,
  0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
};
const unsigned char epd_bitmap_off[] PROGMEM = {
  0xf8, 0xf8, 0xf8, 0xf8, 0xf8
};

const unsigned char epd_bitmap_on[] PROGMEM = {
  0xf8, 0xf8, 0xf8, 0xf8, 0xf8
};


const unsigned char epd_bitmap__lamp[] PROGMEM = {
  0x03, 0xc0, 0x0f, 0xf0, 0x18, 0x18, 0x30, 0x0c, 0x68, 0x16, 0x44, 0x22, 0xc2, 0x43, 0xc1, 0x83,
  0xc1, 0x83, 0xc2, 0x43, 0x44, 0x22, 0x68, 0x16, 0x30, 0x0c, 0x18, 0x18, 0x0f, 0xf0, 0x03, 0xc0
};

const unsigned char *bitmap_icons[3] = {
  epd_bitmap__icon_ina,
  epd_bitmap__icon_monitoring,
  epd_bitmap__icon_timer

};

const unsigned char *bitmap_lamp_icons[4] = {
  epd_bitmap__lamp,
  epd_bitmap__lamp,
  epd_bitmap__lamp,
  epd_bitmap__lamp
};

const int NUM_ITEMS = 3;
const int LAMP_NUM_ITEMS = 4;
const int EEPROMAddress = 0;

const char *menu_items[NUM_ITEMS] = {
  "INA 219",
  "Monitoring",
  "Timer"
};

const char *lamp_menu_items[LAMP_NUM_ITEMS] = {
  "LAMP 4",
  "LAMP 1",
  "LAMP 2",
  "LAMP 3"
};

const int relayPin[] = { 26, 25, 33, 32 };
const int switchPin[] = { 13, 12, 14, 27 };
const int numberOfButtons = sizeof(switchPin) / sizeof(switchPin[0]);

char daysOfTheWeek[7][12] = { "Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday" };

int mainMenuSelection = 0;
int submenuSelection = 0;
bool inSubMenu = false;
bool inLampDisplay = false;

int lastState = LOW;
int count = 0;

#define UP_BUTTON_PIN 17
#define DOWN_BUTTON_PIN 4
#define ENTER_BUTTON_PIN 18
#define BACK_BUTTON_PIN 19
#define SCREEN_BUTTON 5


int lampState1 = LOW;
int lampState2 = LOW;
int lampState3 = LOW;
int lampState4 = LOW;


Button upButton(UP_BUTTON_PIN);
Button downButton(DOWN_BUTTON_PIN);
Button enterButton(ENTER_BUTTON_PIN);
Button backButton(BACK_BUTTON_PIN);
Button screenButton(SCREEN_BUTTON);

Button *buttons[numberOfButtons];

unsigned long previousMillis = 0;
const int long interval = 500;

void setup() {
  // put your setup code here, to run once:
  Serial.begin(57600);
  u8g2.setColorIndex(1);  // set the color to white
  u8g2.begin();
  u8g2.setBitmapMode(1);

  upButton.begin();
  downButton.begin();
  enterButton.begin();
  backButton.begin();
  screenButton.begin();

  if (!rtc.begin()) {
    Serial.println("Couldn't find RTC");
    Serial.flush();
    while (1) delay(10);
  }

  if (rtc.lostPower()) {
    Serial.println("RTC lost power, let's set the time!");
    // When time needs to be set on a new device, or after a power loss, the
    // following line sets the RTC to the date & time this sketch was compiled
    rtc.adjust(DateTime(F(__DATE__), F(__TIME__)));
    // This line sets the RTC with an explicit date & time, for example to set
    // January 21, 2014 at 3am you would call:
    // rtc.adjust(DateTime(2014, 1, 21, 1, 42, 0));
  }

  while (!Serial) {
    delay(1);
  }

  // // Initialize the INA219.
  if (!ina219.begin()) {
    Serial.println("Failed to find INA219 chip");
    while (1) {
      delay(10);
    }
  }
  ina219.setCalibration_16V_400mA();
  Serial.println("Measuring voltage, current, and power with INA219 ...");
  ina219.begin();


  for (int i = 0; i < numberOfButtons; i++) {
    buttons[i] = new Button(switchPin[i]);
    buttons[i]->begin();
    pinMode(relayPin[i], OUTPUT);  // Initialize the relay pins as outputs
  }
}

void loop() {
  DateTime now = rtc.now();


  if (screenButton.pressed()) {
    count++;
  }
  if (count == 0) {
    clockDisplay(now);

  } else if (count == 1) {
    if (inLampDisplay) {
      displaySelectedLamp(submenuSelection);
    } else if (inSubMenu) {
      displaySubMenu();
    } else {
      displayMainMenu(NUM_ITEMS, bitmap_icons, menu_items);
    }

    // Handle button inputs
    handleButtons();
  } else if (count > 1) {
    count = 0;
  }

  manualRelayControl();
}

void handleButtons() {
  if (inLampDisplay) {
    // Only handle back button when in lamp display mode
    if (backButton.pressed()) {
      inLampDisplay = false;
      delay(200);  // Button debounce delay
    }
    return;  // Do not handle other buttons when in lamp display mode
  }

  // Handle button inputs and update menu state accordingly
  if (upButton.pressed()) {
    if (inSubMenu) {
      submenuSelection = (submenuSelection - 1 + LAMP_NUM_ITEMS) % LAMP_NUM_ITEMS;
    } else {
      mainMenuSelection = (mainMenuSelection - 1 + NUM_ITEMS) % NUM_ITEMS;
    }
    delay(200);  // Button debounce delay
  }
  if (downButton.pressed()) {
    if (inSubMenu) {
      submenuSelection = (submenuSelection + 1) % LAMP_NUM_ITEMS;
    } else {
      mainMenuSelection = (mainMenuSelection + 1) % NUM_ITEMS;
    }
    delay(200);  // Button debounce delay
  }
  if (enterButton.pressed()) {
    if (!inSubMenu) {
      inSubMenu = true;
    } else {
      inLampDisplay = true;
    }
    delay(200);  // Button debounce delay
  }
  if (backButton.pressed()) {
    if (inSubMenu) {
      inSubMenu = false;
      submenuSelection = 0;
    }
    delay(200);  // Button debounce delay
  }
}

void displaySelectedLamp(int lampIndex) {
  u8g2.clearBuffer();
  u8g2.setFont(u8g_font_7x14);

  switch (lampIndex) {
    case 0:
      u8g2.drawStr(20, 30, "Lamp 1 Selected");
      break;
    case 1:
      u8g2.drawStr(20, 30, "Lamp 2 Selected");
      break;
    case 2:
      u8g2.drawStr(20, 30, "Lamp 3 Selected");
      break;
    case 3:
      u8g2.drawStr(20, 30, "Lamp 4 Selected");
      break;
  }

  u8g2.sendBuffer();
}

void displaySubMenu() {
  u8g2.clearBuffer();
  const char **menu = nullptr;  // Initialize menu pointer to nullptr

  switch (mainMenuSelection) {
    case 0:
      monitoringDisplay();
      return;  // Exit the function early
    case 1:
      menu = lamp_menu_items;
      break;
    case 2:
      sensorDisplay();
      return;  // Exit the function early
  }
  int itemHeight = 20;
  int y = 17;
  int x = 6;
  // Display submenu options only if menu is not nullptr
  if (menu != nullptr) {
    u8g2.drawBitmap(0, 22, 128 / 8, 21, epd_bitmap__icon_selector);
    u8g2.drawBitmap(120, 1, 8 / 8, 63, epd_bitmap__icon_scrollbar);
    u8g2.drawBox(125, 64 / LAMP_NUM_ITEMS * submenuSelection, LAMP_NUM_ITEMS, 64 / LAMP_NUM_ITEMS);

    for (int i = 0; i < LAMP_NUM_ITEMS; i++) {
      if (i == 1) {
        u8g2.setFont(u8g_font_7x14B);
      } else {
        u8g2.setFont(u8g_font_7x14);
      }
      u8g2.drawStr(25, y, lamp_menu_items[(submenuSelection + i) % LAMP_NUM_ITEMS]);
      u8g2.drawBitmap(x, y - 13, 16 / 8, 16, bitmap_lamp_icons[(submenuSelection + i) % LAMP_NUM_ITEMS]);
      y += itemHeight;
    }
  }

  u8g2.sendBuffer();
}

void displayMainMenu(int numItems, const unsigned char *Icons[], const char *Items[]) {
  u8g2.clearBuffer();
  int itemHeight = 20;
  int y = 17;
  int x = 6;

  u8g2.setFont(u8g_font_7x14);
  u8g2.drawBitmap(0, 22, 128 / 8, 21, epd_bitmap__icon_selector);
  u8g2.drawBitmap(120, 1, 8 / 8, 63, epd_bitmap__icon_scrollbar);
  u8g2.drawBox(125, 64 / numItems * mainMenuSelection, numItems, 64 / numItems);
  for (int i = 0; i < numItems; i++) {
    if (i == 1) {
      u8g2.setFont(u8g_font_7x14B);
    } else {
      u8g2.setFont(u8g_font_7x14);
    }
    u8g2.drawStr(25, y, Items[(mainMenuSelection + i) % numItems]);
    u8g2.drawBitmap(x, y - 13, 16 / 8, 16, Icons[(mainMenuSelection + i) % numItems]);
    y += itemHeight;
  }
  u8g2.sendBuffer();
}


void clockDisplay(DateTime now) {
  u8g2.clearBuffer();

  char timeString[20];
  char secondString[5];
  char dateString[50];
  char tempString[10];
  char periodString[6];

  float temperature = rtc.getTemperature();


  // formatDateTime(now, timeString, sizeof(timeString));
  dateDisplay(now, dateString, sizeof(dateString));
  periodDisplay(now, periodString, sizeof(periodString));

  // sprintf(timeString, "%02d:%02d", now.hour(), now.minute());
  formatDateTime(now, timeString, sizeof(timeString));
  sprintf(secondString, "%02d", now.second());
  dtostrf(temperature, 4, 1, tempString);

  u8g2.setFont(u8g_font_profont29r);
  u8g2.drawStr(20, 33, timeString);
  u8g2.setFont(u8g_font_profont15r);
  u8g2.drawStr(100, 23, secondString);
  u8g2.drawStr(100, 33, periodString);
  u8g2.setFont(u8g_font_profont12r);
  u8g2.drawStr(12, 8, dateString);

  u8g2.setFont(u8g_font_7x14);
  u8g2.drawStr(45, 48, tempString);
  u8g2.drawGlyph(75, 48, 0xB0);  // Display the degree Celsius symbol
  u8g2.drawStr(83, 48, "C");     // Display the degree Celsius symbol
  // u8g2.setFont(u8g2_font_open_iconic_all_2x_t);
  if (lampState1 == HIGH) {
    u8g2.drawGlyph(40, 63, 0xB0);
  } else {
    u8g2.drawStr(40, 63, "-");
  }

  if (lampState2 == HIGH) {
    u8g2.drawGlyph(55, 63, 0xB0);
  } else {
    u8g2.drawStr(55, 63, "-");
  }

  if (lampState3 == HIGH) {
    u8g2.drawGlyph(70, 63, 0xB0);
  } else {
    u8g2.drawStr(70, 63, "-");
  }

  if (lampState4 == HIGH) {
    u8g2.drawGlyph(85, 63, 0xB0);
  } else {
    u8g2.drawStr(85, 63, "-");
  }

  u8g2.sendBuffer();
}

void formatDateTime(DateTime now, char *buffer, size_t bufferSize) {
  int hour12 = now.hour() % 12;
  if (hour12 == 0) {
    hour12 = 12;  // Special case for 12 AM/PM
  }
  snprintf(buffer, bufferSize, "%02d:%02d", hour12, now.minute());
}

void periodDisplay(DateTime now, char* buffer, size_t bufferSize) {
  int hour12 = now.hour() % 12;
  if (hour12 == 0) {
    hour12 == 0;
  }
  const char* period = (now.hour() < 12) ? "AM" : "PM";
  snprintf(buffer, bufferSize, "%s", period);
}


void dateDisplay(DateTime now, char *buffer, size_t bufferSize) {
  snprintf(buffer, bufferSize, "%s, %02d-%02d-%04d",
           daysOfTheWeek[now.dayOfTheWeek()],
           now.day(), now.month(), now.year());
}

void manualRelayControl() {
  for (int i = 0; i < numberOfButtons; i++) {
    if (buttons[i]->pressed()) {
      digitalWrite(relayPin[i], HIGH);  // Turn on the corresponding relay
      // Update the corresponding lampState
      if (i == 0) {
        lampState1 = HIGH;
      } else if (i == 1) {
        lampState2 = HIGH;
      } else if (i == 2) {
        lampState3 = HIGH;
      } else if (i == 3) {
        lampState4 = HIGH;
      }
    }
    if (buttons[i]->released()) {
      digitalWrite(relayPin[i], LOW);  // Turn off the corresponding relay
      // Update the corresponding lampState
      if (i == 0) {
        lampState1 = LOW;
      } else if (i == 1) {
        lampState2 = LOW;
      } else if (i == 2) {
        lampState3 = LOW;
      } else if (i == 3) {
        lampState4 = LOW;
      }
    }
  }
}


void monitoringDisplay() {
  u8g2.clearBuffer();
  u8g2.drawStr(75, 50, "°C");
  u8g2.sendBuffer();
}

void sensorDisplay() {

  unsigned long currentMillis = millis();

  if (currentMillis - previousMillis >= interval) {
    previousMillis = currentMillis;

    float current_mA = 0;
    float loadvoltage = 0;
    float power_mW = 0;
    float shuntvoltage = 0;
    float busvoltage = 0;

    current_mA = ina219.getCurrent_mA() / 1000;
    power_mW = ina219.getPower_mW() / 1000;
    shuntvoltage = ina219.getShuntVoltage_mV();
    busvoltage = ina219.getBusVoltage_V();
    loadvoltage = busvoltage + (shuntvoltage / 1000);

    if (current_mA < 0.01) {
      current_mA = 0.00;
    }

    u8g2.clearBuffer();
    u8g2.setFont(u8g_font_5x8r);
    u8g2.drawBitmap(0, 0, 128 / 8, 64, epd_bitmap_border);
    u8g2.drawStr(13, 17, "Voltage");
    u8g2.drawStr(13, 40, "Current");
    u8g2.drawStr(85, 17, "Power");

    char voltageStr[10];
    char currentStr[10];
    char powerStr[10];

    dtostrf(loadvoltage, 5, 2, voltageStr);  // Format: 5 characters total with
    dtostrf(current_mA, 5, 2, currentStr);
    dtostrf(power_mW, 5, 2, powerStr);

    u8g2.drawStr(20, 27, voltageStr);  // Voltage
    u8g2.drawStr(20, 50, currentStr);  // Current
    u8g2.drawStr(85, 34, powerStr);    // Power

    u8g2.drawStr(59, 23, "V");  // Voltage
    u8g2.drawStr(59, 47, "A");  // Voltage
    u8g2.drawStr(95, 47, "W");  // Voltage
    u8g2.sendBuffer();
  }
}
